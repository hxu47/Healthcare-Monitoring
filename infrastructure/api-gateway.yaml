AWSTemplateFormatVersion: '2010-09-09'
Description: 'Patient Vital Signs Monitoring - API Gateway with Throttling and CORS'

Parameters:
  ProjectName:
    Type: String
    Default: VitalSignsMonitoring
    Description: Name of the project, used as prefix for resource names
  LambdaStackName:
    Type: String
    Default: vital-signs-lambda
    Description: Name of the Lambda stack
  # THROTTLING PARAMETERS:
  ThrottlingBurstLimit:
    Type: Number
    Default: 200
    MinValue: 1
    MaxValue: 5000
    Description: API Gateway throttling burst limit for healthcare endpoints
  ThrottlingRateLimit:
    Type: Number
    Default: 100
    MinValue: 1
    MaxValue: 10000
    Description: API Gateway throttling rate limit (requests per second)

Resources:
  # REST API Gateway
  HealthcareApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-healthcare-api'
      Description: 'API for Patient Vital Signs Monitoring System'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Patients Resource
  PatientsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !GetAtt HealthcareApi.RootResourceId
      PathPart: patients

  # Patient ID Resource
  PatientIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !Ref PatientsResource
      PathPart: '{patientId}'

  # Vital Signs Resource
  VitalSignsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !GetAtt HealthcareApi.RootResourceId
      PathPart: vitalsigns

  # Alerts Resource
  AlertsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !GetAtt HealthcareApi.RootResourceId
      PathPart: alerts

  # Alert ID Resource (for individual alert operations)
  AlertIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !Ref AlertsResource
      PathPart: '{alertId}'

  # Alert Acknowledge Resource (for acknowledge endpoint)
  AlertAcknowledgeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !Ref AlertIdResource
      PathPart: acknowledge

  # CORS OPTIONS Methods
  
  # Enable CORS for /patients
  PatientsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /patients/{patientId}
  PatientIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /vitalsigns
  VitalSignsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref VitalSignsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /alerts
  AlertsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref AlertsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /alerts/{alertId}
  AlertIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref AlertIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /alerts/{alertId}/acknowledge
  AlertAcknowledgeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref AlertAcknowledgeResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Methods

  # GET /patients method
  GetPatientsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-patient-management/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /patients method
  PostPatientsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-patient-management/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # GET /patients/{patientId} method
  GetPatientMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-patient-management/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # PUT /patients/{patientId} method
  PutPatientMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientIdResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-patient-management/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # GET /vitalsigns method
  GetVitalSignsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref VitalSignsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-vitals-api/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # GET /alerts method
  GetAlertsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref AlertsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-alert-management/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # PUT /alerts/{alertId}/acknowledge method
  PutAlertAcknowledgeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref AlertAcknowledgeResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-alert-management/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda permissions for API Gateway
  PatientManagementLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub "${LambdaStackName}-patient-management"
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HealthcareApi}/*/*'

  VitalSignsApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub "${LambdaStackName}-vitals-api"
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HealthcareApi}/*/*'

  AlertManagementLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub "${LambdaStackName}-alert-management"
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HealthcareApi}/*/*'

  # SINGLE API Gateway Deployment with Throttling
  HealthcareApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      # All actual API methods
      - GetPatientsMethod
      - PostPatientsMethod
      - GetPatientMethod
      - PutPatientMethod
      - GetVitalSignsMethod
      - GetAlertsMethod
      - PutAlertAcknowledgeMethod
      # All CORS OPTIONS methods
      - PatientsOptionsMethod
      - PatientIdOptionsMethod
      - VitalSignsOptionsMethod
      - AlertsOptionsMethod
      - AlertIdOptionsMethod
      - AlertAcknowledgeOptionsMethod
    Properties:
      RestApiId: !Ref HealthcareApi
      Description: 'Healthcare API deployment with CORS and custom throttling'

  # Production Stage with Throttling Configuration
  HealthcareApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref HealthcareApi
      DeploymentId: !Ref HealthcareApiDeployment
      StageName: 'prod'
      Description: 'Production stage with healthcare-specific throttling'
      MethodSettings:
        # Global stage throttling settings
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: !Ref ThrottlingBurstLimit
          ThrottlingRateLimit: !Ref ThrottlingRateLimit
          LoggingLevel: INFO
        # Patient data endpoints - more restrictive
        - ResourcePath: '/patients'
          HttpMethod: 'GET'
          ThrottlingBurstLimit: 50
          ThrottlingRateLimit: 25
          LoggingLevel: INFO
        - ResourcePath: '/patients'
          HttpMethod: 'POST'
          ThrottlingBurstLimit: 20
          ThrottlingRateLimit: 10
          LoggingLevel: INFO
        - ResourcePath: '/patients/*'
          HttpMethod: 'GET'
          ThrottlingBurstLimit: 50
          ThrottlingRateLimit: 25
        - ResourcePath: '/patients/*'
          HttpMethod: 'PUT'
          ThrottlingBurstLimit: 20
          ThrottlingRateLimit: 10
        # Vital signs endpoints - higher limits for real-time monitoring
        - ResourcePath: '/vitalsigns'
          HttpMethod: 'GET'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
          LoggingLevel: INFO
        # Alert endpoints - moderate limits
        - ResourcePath: '/alerts'
          HttpMethod: 'GET'
          ThrottlingBurstLimit: 75
          ThrottlingRateLimit: 35
        - ResourcePath: '/alerts/*/acknowledge'
          HttpMethod: 'PUT'
          ThrottlingBurstLimit: 25
          ThrottlingRateLimit: 12
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: APIThrottling
        - Key: Environment
          Value: Production

Outputs:
  ApiGatewayUrl:
    Description: URL of the Healthcare API Gateway with throttling
    Value: !Sub 'https://${HealthcareApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ApiGatewayId:
    Description: ID of the API Gateway
    Value: !Ref HealthcareApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'

  ThrottlingConfiguration:
    Description: API Gateway throttling configuration summary
    Value: !Sub 'Rate: ${ThrottlingRateLimit}/sec, Burst: ${ThrottlingBurstLimit}, Per-method limits applied'
    Export:
      Name: !Sub '${AWS::StackName}-ThrottlingConfig'
      
  ApiStage:
    Description: API Gateway stage with throttling
    Value: !Ref HealthcareApiStage
    Export:
      Name: !Sub '${AWS::StackName}-ApiStage'