AWSTemplateFormatVersion: '2010-09-09'
Description: 'Patient Vital Signs Monitoring - API Gateway for Healthcare Dashboard'

Parameters:
  ProjectName:
    Type: String
    Default: VitalSignsMonitoring
    Description: Name of the project, used as prefix for resource names
  LambdaStackName:
    Type: String
    Default: vital-signs-lambda
    Description: Name of the Lambda stack

Resources:
  # REST API Gateway
  HealthcareApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-healthcare-api'
      Description: 'API for Patient Vital Signs Monitoring System'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - 'application/json'
        - 'application/octet-stream'

  # CORS Options Method for API Gateway
  CorsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !GetAtt HealthcareApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # Patients Resource
  PatientsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !GetAtt HealthcareApi.RootResourceId
      PathPart: patients

  # Patient ID Resource
  PatientIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !Ref PatientsResource
      PathPart: '{patientId}'

  # Vital Signs Resource
  VitalSignsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !GetAtt HealthcareApi.RootResourceId
      PathPart: vitalsigns

  # Alerts Resource
  AlertsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthcareApi
      ParentId: !GetAtt HealthcareApi.RootResourceId
      PathPart: alerts

  # GET /patients method
  GetPatientsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Sub '${LambdaStackName}-PatientManagementFunctionArn'

  # POST /patients method
  PostPatientsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Sub '${LambdaStackName}-PatientManagementFunctionArn'

  # GET /patients/{patientId} method
  GetPatientMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Sub '${LambdaStackName}-PatientManagementFunctionArn'

  # PUT /patients/{patientId} method
  PutPatientMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref PatientIdResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Sub '${LambdaStackName}-PatientManagementFunctionArn'

  # GET /vitalsigns method
  GetVitalSignsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref VitalSignsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Sub '${LambdaStackName}-VitalSignsApiFunctionArn'

  # GET /alerts method
  GetAlertsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthcareApi
      ResourceId: !Ref AlertsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Sub '${LambdaStackName}-AlertManagementFunctionArn'

  # Lambda permissions for API Gateway
  PatientManagementLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::ImportValue: !Sub '${LambdaStackName}-PatientManagementFunctionName'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HealthcareApi}/*/*'

  VitalSignsApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::ImportValue: !Sub '${LambdaStackName}-VitalSignsApiFunctionName'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HealthcareApi}/*/*'

  AlertManagementLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::ImportValue: !Sub '${LambdaStackName}-AlertManagementFunctionName'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HealthcareApi}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetPatientsMethod
      - PostPatientsMethod
      - GetPatientMethod
      - PutPatientMethod
      - GetVitalSignsMethod
      - GetAlertsMethod
      - CorsOptionsMethod
    Properties:
      RestApiId: !Ref HealthcareApi
      StageName: prod
      StageDescription:
        Description: 'Production stage for Patient Vital Signs Monitoring API'
        Variables:
          Stack: !Ref AWS::StackName

Outputs:
  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value: !Sub 'https://${HealthcareApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ApiGatewayId:
    Description: ID of the API Gateway
    Value: !Ref HealthcareApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'

  ApiGatewayArn:
    Description: ARN of the API Gateway
    Value: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${HealthcareApi}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayArn'