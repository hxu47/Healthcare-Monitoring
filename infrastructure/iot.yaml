AWSTemplateFormatVersion: '2010-09-09'
Description: 'Patient Vital Signs Monitoring - IoT Core for Sensor Data Ingestion'

Parameters:
  ProjectName:
    Type: String
    Default: VitalSignsMonitoring
    Description: Name of the project, used as prefix for resource names
  DynamoDBStackName:
    Type: String
    Default: vital-signs-dynamodb
    Description: Name of the DynamoDB stack

Resources:
  # IoT Thing Type for Medical Sensors
  MedicalSensorThingType:
    Type: AWS::IoT::ThingType
    Properties:
      ThingTypeName: !Sub '${ProjectName}-MedicalSensor'
      ThingTypeProperties:
        ThingTypeDescription: 'Medical sensor devices for patient vital signs monitoring'
        SearchableAttributes:
          - 'PatientId'
          - 'RoomNumber'
          - 'SensorType'

  # IoT Policy for Medical Sensors
  MedicalSensorPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-MedicalSensorPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${!iot:Connection.Thing.ThingName}'
          - Effect: Allow
            Action:
              - iot:Publish
            Resource: 
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/vitalsigns/+/data'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/vitalsigns/+/status'
          - Effect: Allow
            Action:
              - iot:Subscribe
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/vitalsigns/+/commands'
          - Effect: Allow
            Action:
              - iot:Receive
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/vitalsigns/+/commands'

  # Kinesis Stream for Real-time Data Processing
  VitalSignsKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ProjectName}-vital-signs-stream'
      ShardCount: 2
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: DataStreaming

  # SNS Topic for Critical Alerts
  CriticalAlertsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-critical-alerts'
      DisplayName: 'Patient Critical Vital Signs Alerts'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: AlertSystem

  # SNS Subscription for Email Alerts (placeholder)
  EmailAlertSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref CriticalAlertsSnsTopic
      Endpoint: 'healthcare-alerts@example.com'  # Replace with actual email

  # IoT Topic Rule for Vital Signs Data Processing
  VitalSignsTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub '${ProjectName}_VitalSignsProcessing'
      TopicRulePayload:
        Description: 'Process incoming vital signs data from medical sensors'
        Sql: "SELECT *, topic(2) as PatientId, timestamp() as ProcessedAt FROM 'vitalsigns/+/data'"
        RuleDisabled: false
        Actions:
          # Send to DynamoDB for storage
          - DynamoDBv2:
              RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
              PutItem:
                TableName:
                  Fn::ImportValue: !Sub '${DynamoDBStackName}-VitalSignsTableName'
          # Send to Kinesis for real-time processing
          - Kinesis:
              RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
              StreamName: !Ref VitalSignsKinesisStream
              PartitionKey: '${PatientId}'

  # IoT Topic Rule for Alert Processing
  AlertTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub '${ProjectName}_AlertProcessing'
      TopicRulePayload:
        Description: 'Process critical vital signs that require immediate attention'
        Sql: |
          SELECT *, topic(2) as PatientId 
          FROM 'vitalsigns/+/data' 
          WHERE heartRate > 120 OR heartRate < 50 
          OR systolicBP > 180 OR systolicBP < 90
          OR temperature > 101.5 OR temperature < 95.0
          OR oxygenSaturation < 90
        RuleDisabled: false
        Actions:
          # Send to SNS for immediate alerts
          - Sns:
              RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
              TargetArn: !Ref CriticalAlertsSnsTopic
              MessageFormat: JSON

Outputs:
  IoTEndpoint:
    Description: IoT Core endpoint for device connections
    Value: !Sub '${AWS::AccountId}.iot.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-IoTEndpoint'

  MedicalSensorThingType:
    Description: Thing type for medical sensors
    Value: !Ref MedicalSensorThingType
    Export:
      Name: !Sub '${AWS::StackName}-MedicalSensorThingType'

  MedicalSensorPolicy:
    Description: IoT policy for medical sensors
    Value: !Ref MedicalSensorPolicy
    Export:
      Name: !Sub '${AWS::StackName}-MedicalSensorPolicy'

  VitalSignsKinesisStreamName:
    Description: Name of the Kinesis stream for vital signs data
    Value: !Ref VitalSignsKinesisStream
    Export:
      Name: !Sub '${AWS::StackName}-VitalSignsKinesisStreamName'

  VitalSignsKinesisStreamArn:
    Description: ARN of the Kinesis stream for vital signs data
    Value: !GetAtt VitalSignsKinesisStream.Arn
    Export:
      Name: !Sub '${AWS::StackName}-VitalSignsKinesisStreamArn'

  CriticalAlertsTopicArn:
    Description: ARN of the SNS topic for critical alerts
    Value: !Ref CriticalAlertsSnsTopic
    Export:
      Name: !Sub '${AWS::StackName}-CriticalAlertsTopicArn'

  VitalSignsTopicRule:
    Description: IoT topic rule for vital signs processing
    Value: !Ref VitalSignsTopicRule
    Export:
      Name: !Sub '${AWS::StackName}-VitalSignsTopicRule'

  AlertTopicRule:
    Description: IoT topic rule for alert processing
    Value: !Ref AlertTopicRule
    Export:
      Name: !Sub '${AWS::StackName}-AlertTopicRule'

  # IoT Policy for Medical Sensors
  MedicalSensorPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-MedicalSensorPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${!iot:Connection.Thing.ThingName}'
          - Effect: Allow
            Action:
              - iot:Publish
            Resource: 
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/vitalsigns/+/data'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/vitalsigns/+/status'
          - Effect: Allow
            Action:
              - iot:Subscribe
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/vitalsigns/+/commands'
          - Effect: Allow
            Action:
              - iot:Receive
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/vitalsigns/+/commands'

  # IoT Topic Rule for Vital Signs Data Processing
  VitalSignsTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub '${ProjectName}_VitalSignsProcessing'
      TopicRulePayload:
        Description: 'Process incoming vital signs data from medical sensors'
        Sql: "SELECT *, topic(2) as PatientId, timestamp() as ProcessedAt FROM 'vitalsigns/+/data'"
        RuleDisabled: false
        Actions:
          # Send to DynamoDB for storage
          - DynamoDBv2:
              RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
              PutItem:
                TableName:
                  Fn::ImportValue: !Sub '${DynamoDBStackName}-VitalSignsTableName'
          # Send to Kinesis for real-time processing
          - Kinesis:
              RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
              StreamName: !Ref VitalSignsKinesisStream
              PartitionKey: '${PatientId}'

  # IoT Topic Rule for Alert Processing
  AlertTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub '${ProjectName}_AlertProcessing'
      TopicRulePayload:
        Description: 'Process critical vital signs that require immediate attention'
        Sql: |
          SELECT *, topic(2) as PatientId 
          FROM 'vitalsigns/+/data' 
          WHERE heartRate > 120 OR heartRate < 50 
          OR systolicBP > 180 OR systolicBP < 90
          OR temperature > 101.5 OR temperature < 95.0
          OR oxygenSaturation < 90
        RuleDisabled: false
        Actions:
          # Send to SNS for immediate alerts
          - Sns:
              RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
              TargetArn: !Ref CriticalAlertsSnsTopic
              MessageFormat: JSON

  # Kinesis Stream for Real-time Data Processing
  VitalSignsKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ProjectName}-vital-signs-stream'
      ShardCount: 2
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: DataStreaming

  # SNS Topic for Critical Alerts
  CriticalAlertsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-critical-alerts'
      DisplayName: 'Patient Critical Vital Signs Alerts'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: AlertSystem

  # SNS Subscription for Email Alerts (placeholder)
  EmailAlertSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref CriticalAlertsSnsTopic
      Endpoint: 'healthcare-alerts@example.com'  # Replace with actual email

  # IoT Certificate for Device Authentication (example)
  DeviceCertificate:
    Type: AWS::IoT::Certificate
    Properties:
      Status: ACTIVE
      CertificateSigningRequest: |
        -----BEGIN CERTIFICATE REQUEST-----
        MIICWjCCAUICAQAwFTETMBEGA1UEAwwKVGVzdERldmljZTCCASIwDQYJKoZIhvcN
        AQEBBQADggEPADCCAQoCggEBAMock1234567890...
        -----END CERTIFICATE REQUEST-----

Outputs:
  IoTEndpoint:
    Description: IoT Core endpoint for device connections
    Value: !Sub '${AWS::AccountId}.iot.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-IoTEndpoint'

  MedicalSensorThingType:
    Description: Thing type for medical sensors
    Value: !Ref MedicalSensorThingType
    Export:
      Name: !Sub '${AWS::StackName}-MedicalSensorThingType'

  MedicalSensorPolicy:
    Description: IoT policy for medical sensors
    Value: !Ref MedicalSensorPolicy
    Export:
      Name: !Sub '${AWS::StackName}-MedicalSensorPolicy'

  VitalSignsKinesisStreamName:
    Description: Name of the Kinesis stream for vital signs data
    Value: !Ref VitalSignsKinesisStream
    Export:
      Name: !Sub '${AWS::StackName}-VitalSignsKinesisStreamName'

  VitalSignsKinesisStreamArn:
    Description: ARN of the Kinesis stream for vital signs data
    Value: !GetAtt VitalSignsKinesisStream.Arn
    Export:
      Name: !Sub '${AWS::StackName}-VitalSignsKinesisStreamArn'

  CriticalAlertsTopicArn:
    Description: ARN of the SNS topic for critical alerts
    Value: !Ref CriticalAlertsSnsTopic
    Export:
      Name: !Sub '${AWS::StackName}-CriticalAlertsTopicArn'

  VitalSignsTopicRule:
    Description: IoT topic rule for vital signs processing
    Value: !Ref VitalSignsTopicRule
    Export:
      Name: !Sub '${AWS::StackName}-VitalSignsTopicRule'

  AlertTopicRule:
    Description: IoT topic rule for alert processing
    Value: !Ref AlertTopicRule
    Export:
      Name: !Sub '${AWS::StackName}-AlertTopicRule'